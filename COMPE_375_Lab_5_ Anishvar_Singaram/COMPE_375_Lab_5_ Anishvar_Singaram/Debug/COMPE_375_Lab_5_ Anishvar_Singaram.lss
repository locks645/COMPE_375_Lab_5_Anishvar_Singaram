
COMPE_375_Lab_5_ Anishvar_Singaram.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  000001e2  00000256  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001e2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000266  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000298  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  000002d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a3d  00000000  00000000  00000308  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000097a  00000000  00000000  00000d45  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000313  00000000  00000000  000016bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000054  00000000  00000000  000019d4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004bf  00000000  00000000  00001a28  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000c8  00000000  00000000  00001ee7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00001faf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
   8:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
   c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  10:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  14:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  18:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  1c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  20:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  24:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  28:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  2c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  30:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  34:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  38:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  3c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  40:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  44:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  48:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  4c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  50:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  54:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  58:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  5c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  60:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  64:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  68:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  6c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  70:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  74:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  78:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  7c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  80:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  84:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  88:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  8c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  90:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  94:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  98:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  9c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  a0:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  a4:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  a8:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  ac:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  b0:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
  c0:	11 e0       	ldi	r17, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	e2 ee       	ldi	r30, 0xE2	; 226
  c8:	f1 e0       	ldi	r31, 0x01	; 1
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
  cc:	05 90       	lpm	r0, Z+
  ce:	0d 92       	st	X+, r0
  d0:	a0 31       	cpi	r26, 0x10	; 16
  d2:	b1 07       	cpc	r27, r17
  d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>
  d6:	0e 94 9e 00 	call	0x13c	; 0x13c <main>
  da:	0c 94 ef 00 	jmp	0x1de	; 0x1de <_exit>

000000de <__bad_interrupt>:
  de:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000e2 <PortInitializations>:
// initialize general I/O ports
void PortInitializations() 
{
	
	// 4x4 keypad I/O initializations
	DDRD |= ( (1<<DDD0) | (1<<DDD1) | (1<<DDD2) | (1<<DDD3) ); // set PD0-3 as output (row)
  e2:	8a b1       	in	r24, 0x0a	; 10
  e4:	8f 60       	ori	r24, 0x0F	; 15
  e6:	8a b9       	out	0x0a, r24	; 10
	DDRB &= ( ~(1<<DDB0) & ~(1<<DDB1) & ~(1<<DDB2) & ~(1<<DDB3) ); // set PB0-3 as input (col)
  e8:	84 b1       	in	r24, 0x04	; 4
  ea:	80 7f       	andi	r24, 0xF0	; 240
  ec:	84 b9       	out	0x04, r24	; 4
	PORTB |= ( (1<<PORTB0) | (1<<PORTB1) | (1<<PORTB2) | (1<<PORTB3) ); // enable pull-up option (1)
  ee:	85 b1       	in	r24, 0x05	; 5
  f0:	8f 60       	ori	r24, 0x0F	; 15
  f2:	85 b9       	out	0x05, r24	; 5
	PORTD |= ( (1<<PORTD4) | (1<<PORTD5) | (1<<PORTD6) | (1<<PORTD7) ); // make all rows logic high (1)
  f4:	8b b1       	in	r24, 0x0b	; 11
  f6:	80 6f       	ori	r24, 0xF0	; 240
  f8:	8b b9       	out	0x0b, r24	; 11
	
	// fast PWM I/O initializations
	DDRD |= (1<<DDD6); // set PD6 as Fast PWM output (OC0A)
  fa:	8a b1       	in	r24, 0x0a	; 10
  fc:	80 64       	ori	r24, 0x40	; 64
  fe:	8a b9       	out	0x0a, r24	; 10
 100:	08 95       	ret

00000102 <RunTimer0>:
// run timer0 as long as button is pressed
void RunTimer0(uint8_t bVal, uint8_t keyCol) 
{
	
	// Timer0 initializations
	TCCR0A |= ( (1<<WGM01) | (1<<WGM00) ); // enable Fast PWM (TOP = OCRA) mode
 102:	94 b5       	in	r25, 0x24	; 36
 104:	93 60       	ori	r25, 0x03	; 3
 106:	94 bd       	out	0x24, r25	; 36
	TCCR0B |= (1<<WGM02); // enable Fast PWM (TOP = OCRA) mode
 108:	95 b5       	in	r25, 0x25	; 37
 10a:	98 60       	ori	r25, 0x08	; 8
 10c:	95 bd       	out	0x25, r25	; 37
	TCCR0A |= (1<<COM0A0); // turn OC0A pin on
 10e:	94 b5       	in	r25, 0x24	; 36
 110:	90 64       	ori	r25, 0x40	; 64
 112:	94 bd       	out	0x24, r25	; 36
	OCR0B = bVal; // TON
 114:	88 bd       	out	0x28, r24	; 40
	OCR0A = 2*bVal; // TOP value (2*TON = 50% duty cycle)
 116:	88 0f       	add	r24, r24
 118:	87 bd       	out	0x27, r24	; 39
	TCCR0B |= ( (1<<CS02) | (1<<CS00) ); // clk (Prescale = 1024)
 11a:	85 b5       	in	r24, 0x25	; 37
 11c:	85 60       	ori	r24, 0x05	; 5
 11e:	85 bd       	out	0x25, r24	; 37
	
	while ( !(PINB & (1<<keyCol)) ); // run fast PWM while button pressed
 120:	83 b1       	in	r24, 0x03	; 3
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	06 2e       	mov	r0, r22
 126:	02 c0       	rjmp	.+4      	; 0x12c <RunTimer0+0x2a>
 128:	95 95       	asr	r25
 12a:	87 95       	ror	r24
 12c:	0a 94       	dec	r0
 12e:	e2 f7       	brpl	.-8      	; 0x128 <RunTimer0+0x26>
 130:	80 ff       	sbrs	r24, 0
 132:	f6 cf       	rjmp	.-20     	; 0x120 <RunTimer0+0x1e>
	TCCR0A &= ~(1<<COM0A0); // turn OC0A pin off
 134:	84 b5       	in	r24, 0x24	; 36
 136:	8f 7b       	andi	r24, 0xBF	; 191
 138:	84 bd       	out	0x24, r24	; 36
 13a:	08 95       	ret

0000013c <main>:
void PortInitializations();
void RunTimer0(uint8_t bVal, uint8_t keyCol);

// main function
int main(void)
{
 13c:	cf 93       	push	r28
 13e:	df 93       	push	r29
 140:	cd b7       	in	r28, 0x3d	; 61
 142:	de b7       	in	r29, 0x3e	; 62
 144:	60 97       	sbiw	r28, 0x10	; 16
 146:	0f b6       	in	r0, 0x3f	; 63
 148:	f8 94       	cli
 14a:	de bf       	out	0x3e, r29	; 62
 14c:	0f be       	out	0x3f, r0	; 63
 14e:	cd bf       	out	0x3d, r28	; 61
	
	// OCRB TON frequency values				 
	uint8_t TON[4][4] = {
 150:	80 e1       	ldi	r24, 0x10	; 16
 152:	e0 e0       	ldi	r30, 0x00	; 0
 154:	f1 e0       	ldi	r31, 0x01	; 1
 156:	de 01       	movw	r26, r28
 158:	11 96       	adiw	r26, 0x01	; 1
 15a:	01 90       	ld	r0, Z+
 15c:	0d 92       	st	X+, r0
 15e:	8a 95       	dec	r24
 160:	e1 f7       	brne	.-8      	; 0x15a <main+0x1e>
							{27, 26, 24, 23},
							{21, 20, 19, 18},
							{17, 16, 15, 14},
						};

	PortInitializations(); // initialize general I/O ports 
 162:	0e 94 71 00 	call	0xe2	; 0xe2 <PortInitializations>
	
	while(1)
	{
		
		// loop to check if 4x4 keypad pressed
		for (uint8_t keyRow = 0; keyRow < 4; keyRow++)
 166:	00 e0       	ldi	r16, 0x00	; 0
 168:	37 c0       	rjmp	.+110    	; 0x1d8 <main+0x9c>
		{	
			PORTD &= ~(1<<keyRow); // set a row to input sequentially	
 16a:	8b b1       	in	r24, 0x0b	; 11
 16c:	c0 2e       	mov	r12, r16
 16e:	d1 2c       	mov	r13, r1
 170:	21 e0       	ldi	r18, 0x01	; 1
 172:	30 e0       	ldi	r19, 0x00	; 0
 174:	79 01       	movw	r14, r18
 176:	00 2e       	mov	r0, r16
 178:	02 c0       	rjmp	.+4      	; 0x17e <main+0x42>
 17a:	ee 0c       	add	r14, r14
 17c:	ff 1c       	adc	r15, r15
 17e:	0a 94       	dec	r0
 180:	e2 f7       	brpl	.-8      	; 0x17a <main+0x3e>
 182:	9e 2d       	mov	r25, r14
 184:	90 95       	com	r25
 186:	89 23       	and	r24, r25
 188:	8b b9       	out	0x0b, r24	; 11
			for (uint8_t keyCol = 0; keyCol < 4; keyCol++)
 18a:	10 e0       	ldi	r17, 0x00	; 0
 18c:	1f c0       	rjmp	.+62     	; 0x1cc <main+0x90>
			{
				// if col is 0 (input) in input row, button is pressed
				if ( !(PINB & (1<<keyCol)) ) 
 18e:	83 b1       	in	r24, 0x03	; 3
 190:	21 2f       	mov	r18, r17
 192:	30 e0       	ldi	r19, 0x00	; 0
 194:	90 e0       	ldi	r25, 0x00	; 0
 196:	01 2e       	mov	r0, r17
 198:	02 c0       	rjmp	.+4      	; 0x19e <main+0x62>
 19a:	95 95       	asr	r25
 19c:	87 95       	ror	r24
 19e:	0a 94       	dec	r0
 1a0:	e2 f7       	brpl	.-8      	; 0x19a <main+0x5e>
 1a2:	80 fd       	sbrc	r24, 0
 1a4:	12 c0       	rjmp	.+36     	; 0x1ca <main+0x8e>
				{
					RunTimer0(TON[keyRow][keyCol], keyCol); // run timer0 as long as button is pressed
 1a6:	c6 01       	movw	r24, r12
 1a8:	88 0f       	add	r24, r24
 1aa:	99 1f       	adc	r25, r25
 1ac:	88 0f       	add	r24, r24
 1ae:	99 1f       	adc	r25, r25
 1b0:	41 e0       	ldi	r20, 0x01	; 1
 1b2:	50 e0       	ldi	r21, 0x00	; 0
 1b4:	4c 0f       	add	r20, r28
 1b6:	5d 1f       	adc	r21, r29
 1b8:	84 0f       	add	r24, r20
 1ba:	95 1f       	adc	r25, r21
 1bc:	fc 01       	movw	r30, r24
 1be:	e2 0f       	add	r30, r18
 1c0:	f3 1f       	adc	r31, r19
 1c2:	61 2f       	mov	r22, r17
 1c4:	80 81       	ld	r24, Z
 1c6:	0e 94 81 00 	call	0x102	; 0x102 <RunTimer0>
		
		// loop to check if 4x4 keypad pressed
		for (uint8_t keyRow = 0; keyRow < 4; keyRow++)
		{	
			PORTD &= ~(1<<keyRow); // set a row to input sequentially	
			for (uint8_t keyCol = 0; keyCol < 4; keyCol++)
 1ca:	1f 5f       	subi	r17, 0xFF	; 255
 1cc:	14 30       	cpi	r17, 0x04	; 4
 1ce:	f8 f2       	brcs	.-66     	; 0x18e <main+0x52>
				if ( !(PINB & (1<<keyCol)) ) 
				{
					RunTimer0(TON[keyRow][keyCol], keyCol); // run timer0 as long as button is pressed
				}
			}
			PORTD |= (1 << keyRow); // reset current row to output
 1d0:	8b b1       	in	r24, 0x0b	; 11
 1d2:	e8 2a       	or	r14, r24
 1d4:	eb b8       	out	0x0b, r14	; 11
	
	while(1)
	{
		
		// loop to check if 4x4 keypad pressed
		for (uint8_t keyRow = 0; keyRow < 4; keyRow++)
 1d6:	0f 5f       	subi	r16, 0xFF	; 255
 1d8:	04 30       	cpi	r16, 0x04	; 4
 1da:	38 f2       	brcs	.-114    	; 0x16a <main+0x2e>
 1dc:	c4 cf       	rjmp	.-120    	; 0x166 <main+0x2a>

000001de <_exit>:
 1de:	f8 94       	cli

000001e0 <__stop_program>:
 1e0:	ff cf       	rjmp	.-2      	; 0x1e0 <__stop_program>
